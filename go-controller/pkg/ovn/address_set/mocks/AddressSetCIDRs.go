// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
)

// AddressSetCIDRs is an autogenerated mock type for the AddressSetCIDRs type
type AddressSetCIDRs struct {
	mock.Mock
}

// AddCIDRs provides a mock function with given fields: cidrs
func (_m *AddressSetCIDRs) AddCIDRs(cidrs []*net.IPNet) error {
	ret := _m.Called(cidrs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*net.IPNet) error); ok {
		r0 = rf(cidrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCIDRsReturnOps provides a mock function with given fields: ip
func (_m *AddressSetCIDRs) AddCIDRsReturnOps(ip []*net.IPNet) ([]ovsdb.Operation, error) {
	ret := _m.Called(ip)

	var r0 []ovsdb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func([]*net.IPNet) ([]ovsdb.Operation, error)); ok {
		return rf(ip)
	}
	if rf, ok := ret.Get(0).(func([]*net.IPNet) []ovsdb.Operation); ok {
		r0 = rf(ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func([]*net.IPNet) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCIDRs provides a mock function with given fields: cidrs
func (_m *AddressSetCIDRs) DeleteCIDRs(cidrs []*net.IPNet) error {
	ret := _m.Called(cidrs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*net.IPNet) error); ok {
		r0 = rf(cidrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCIDRsReturnOps provides a mock function with given fields: cidrs
func (_m *AddressSetCIDRs) DeleteCIDRsReturnOps(cidrs []*net.IPNet) ([]ovsdb.Operation, error) {
	ret := _m.Called(cidrs)

	var r0 []ovsdb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func([]*net.IPNet) ([]ovsdb.Operation, error)); ok {
		return rf(cidrs)
	}
	if rf, ok := ret.Get(0).(func([]*net.IPNet) []ovsdb.Operation); ok {
		r0 = rf(cidrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func([]*net.IPNet) error); ok {
		r1 = rf(cidrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields:
func (_m *AddressSetCIDRs) Destroy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetASHashNames provides a mock function with given fields:
func (_m *AddressSetCIDRs) GetASHashNames() (string, string) {
	ret := _m.Called()

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetCIDRs provides a mock function with given fields:
func (_m *AddressSetCIDRs) GetCIDRs() ([]string, []string) {
	ret := _m.Called()

	var r0 []string
	var r1 []string
	if rf, ok := ret.Get(0).(func() ([]string, []string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() []string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *AddressSetCIDRs) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetCIDRs provides a mock function with given fields: cidrs
func (_m *AddressSetCIDRs) SetCIDRs(cidrs []*net.IPNet) error {
	ret := _m.Called(cidrs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*net.IPNet) error); ok {
		r0 = rf(cidrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAddressSetCIDRs interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressSetCIDRs creates a new instance of AddressSetCIDRs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressSetCIDRs(t mockConstructorTestingTNewAddressSetCIDRs) *AddressSetCIDRs {
	mock := &AddressSetCIDRs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
