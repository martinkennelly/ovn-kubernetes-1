// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	addressset "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/ovn/address_set"
	mock "github.com/stretchr/testify/mock"

	net "net"

	ops "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/libovsdb/ops"

	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
)

// AddressSetFactoryIPs is an autogenerated mock type for the AddressSetFactoryIPs type
type AddressSetFactoryIPs struct {
	mock.Mock
}

// DestroyAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactoryIPs) DestroyAddressSet(dbIDs *ops.DbObjectIDs) error {
	ret := _m.Called(dbIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs) error); ok {
		r0 = rf(dbIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactoryIPs) EnsureAddressSet(dbIDs *ops.DbObjectIDs) (addressset.AddressSetIPs, error) {
	ret := _m.Called(dbIDs)

	var r0 addressset.AddressSetIPs
	var r1 error
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs) (addressset.AddressSetIPs, error)); ok {
		return rf(dbIDs)
	}
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs) addressset.AddressSetIPs); ok {
		r0 = rf(dbIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSetIPs)
		}
	}

	if rf, ok := ret.Get(1).(func(*ops.DbObjectIDs) error); ok {
		r1 = rf(dbIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactoryIPs) GetAddressSet(dbIDs *ops.DbObjectIDs) (addressset.AddressSetIPs, error) {
	ret := _m.Called(dbIDs)

	var r0 addressset.AddressSetIPs
	var r1 error
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs) (addressset.AddressSetIPs, error)); ok {
		return rf(dbIDs)
	}
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs) addressset.AddressSetIPs); ok {
		r0 = rf(dbIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSetIPs)
		}
	}

	if rf, ok := ret.Get(1).(func(*ops.DbObjectIDs) error); ok {
		r1 = rf(dbIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressSet provides a mock function with given fields: dbIDs, ips
func (_m *AddressSetFactoryIPs) NewAddressSet(dbIDs *ops.DbObjectIDs, ips []net.IP) (addressset.AddressSetIPs, error) {
	ret := _m.Called(dbIDs, ips)

	var r0 addressset.AddressSetIPs
	var r1 error
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs, []net.IP) (addressset.AddressSetIPs, error)); ok {
		return rf(dbIDs, ips)
	}
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs, []net.IP) addressset.AddressSetIPs); ok {
		r0 = rf(dbIDs, ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSetIPs)
		}
	}

	if rf, ok := ret.Get(1).(func(*ops.DbObjectIDs, []net.IP) error); ok {
		r1 = rf(dbIDs, ips)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressSetOps provides a mock function with given fields: dbIDs, ips
func (_m *AddressSetFactoryIPs) NewAddressSetOps(dbIDs *ops.DbObjectIDs, ips []net.IP) (addressset.AddressSetIPs, []ovsdb.Operation, error) {
	ret := _m.Called(dbIDs, ips)

	var r0 addressset.AddressSetIPs
	var r1 []ovsdb.Operation
	var r2 error
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs, []net.IP) (addressset.AddressSetIPs, []ovsdb.Operation, error)); ok {
		return rf(dbIDs, ips)
	}
	if rf, ok := ret.Get(0).(func(*ops.DbObjectIDs, []net.IP) addressset.AddressSetIPs); ok {
		r0 = rf(dbIDs, ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSetIPs)
		}
	}

	if rf, ok := ret.Get(1).(func(*ops.DbObjectIDs, []net.IP) []ovsdb.Operation); ok {
		r1 = rf(dbIDs, ips)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]ovsdb.Operation)
		}
	}

	if rf, ok := ret.Get(2).(func(*ops.DbObjectIDs, []net.IP) error); ok {
		r2 = rf(dbIDs, ips)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProcessEachAddressSet provides a mock function with given fields: ownerController, dbIDsType, iteratorFn
func (_m *AddressSetFactoryIPs) ProcessEachAddressSet(ownerController string, dbIDsType *ops.ObjectIDsType, iteratorFn addressset.AddressSetIterFunc) error {
	ret := _m.Called(ownerController, dbIDsType, iteratorFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *ops.ObjectIDsType, addressset.AddressSetIterFunc) error); ok {
		r0 = rf(ownerController, dbIDsType, iteratorFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAddressSetFactoryIPs interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressSetFactoryIPs creates a new instance of AddressSetFactoryIPs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressSetFactoryIPs(t mockConstructorTestingTNewAddressSetFactoryIPs) *AddressSetFactoryIPs {
	mock := &AddressSetFactoryIPs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
